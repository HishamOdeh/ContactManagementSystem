@using ContactManagementSystem.Shared.Features.Contacts

<EditForm Model="@SearchContact" OnValidSubmit="HandleSubmitAsync">
    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">Search Contacts</MudText>
                <MudText Color="@Color.Error">
                    <ValidationSummary />
                </MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudTextField @bind-Value="SearchContact.FirstName" Label="First Name" Variant="Variant.Text" Margin="Margin.Normal"
                          For="@(()=> SearchContact.FirstName)"></MudTextField>
            <MudTextField @bind-Value="SearchContact.LastName" Label="Last Name" Variant="Variant.Text" Margin="Margin.Normal"
                          For="@(()=> SearchContact.LastName)"></MudTextField>
        </MudCardContent>
        <MudCardActions Class="d-flex justify-end py-2 px-1">
            <MudButton Variant="Variant.Filled" Color="Color.Default" OnClick="Cancel" class="ml-4">Cancel</MudButton>
              <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" class="m1-2" Disabled="IsProcessing">Search</MudButton> </MudCardActions>
        </MudCard>
</EditForm>
@code {
    [Parameter] public bool IsProcessing { get; set; }

    [Parameter] public SearchContactRequest SearchContact { get; set; }
    [Parameter] public Func<SearchContactRequest, Task> OnSubmit { get; set; }
    [Parameter] public Action OnCancel { get; set; }

    private async Task HandleSubmitAsync()
    {
        await OnSubmit.Invoke(SearchContact);
    }

    private void Cancel() => OnCancel();
}
